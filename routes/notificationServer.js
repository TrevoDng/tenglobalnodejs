const pool = require('../postgres/postgresConfig');

//create notification table
const notificationSql = `CREATE TABLE IF NOT EXISTS notification (
notification_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
proof_id int,
created_on TIMESTAMPTZ,
read VARCHAR(255),
notification_message VARCHAR(255),
user_id int)`;

pool.query(notificationSql, function (err, result) {
  if (err) throw err;
  console.log("notification table created");
});

const getNotificationById=(req, res)=>{
    const user_id = parseInt(req.params['user_id'])
    console.log(user_id);

    if (user_id) {

      pool.query('SELECT * FROM notification WHERE user_id = $1', [user_id], (error, results) => {
        //const proof = results.rows;
        console.log({getNotificationResults: results.rows});
        return res.status(200).json(results.rows)
      })
      
    } else {
      console.error("Invalid user_id parameter");
      console.log({getNotificationResults: "Bad notification request"});
      return res.status(400).send("Bad notification request");
    }
  }

  // Update individual notification
const updateNotificationByIdReadStatus = (req, res) => {
  const user_id = parseInt(req.params['user_id']);
  const notification_id = parseInt(req.params['notification_id']);

  if (user_id && notification_id) {
    pool.query('UPDATE notification SET read = $1 WHERE user_id = $2 AND proof_id = $3', ['seen', user_id, notification_id], (error, results) => {
      if (error) {
        console.error(error);
        console.log({updateNotificationError: "Error updating notification"})
        return res.status(500).send("Error updating notification");
      } else {
        console.log({updateNotificationError: "Notification marked as seen"})
        return res.status(200).send("Notification marked as seen");
      }
    });
  } else {
    console.error("Invalid user_id or notification_id parameter");
    return res.status(400).send("Bad request");
  }
};

// Update all notifications
const updateAllNotificationsReadStatus = (req, res) => {
  const user_id = parseInt(req.params['user_id']);

  if (user_id) {
    pool.query('UPDATE notification SET read = $1 WHERE user_id = $2', ['read', user_id], (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).send("Error updating notifications");
      } else {
        return res.status(200).json({message: `Notifications updated successfully`});
      }
    });
  } else {
    console.error("Invalid user_id parameter");
    return res.status(400).json({message: `Invalid request`});
  }
};

  module.exports = {
    getNotificationById,
    updateNotificationByIdReadStatus,
    updateAllNotificationsReadStatus,
  }